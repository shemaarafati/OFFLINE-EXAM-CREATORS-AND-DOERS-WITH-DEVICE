-- =======================================================================
-- DATABASE CREATION SCRIPT: offline_exam_system
-- =======================================================================

-- Create schema/user for Oracle (optional depending on setup)
CREATE USER offline_exam_system IDENTIFIED BY exam123;
GRANT CONNECT, RESOURCE TO offline_exam_system;
ALTER USER offline_exam_system DEFAULT ROLE ALL;

-- Switch to schema
ALTER SESSION SET CURRENT_SCHEMA = offline_exam_system;

-- =======================================================================
-- TABLES, SEQUENCES, AND TRIGGERS
-- =======================================================================

-- USERS TABLE
CREATE TABLE USERS (
    user_id VARCHAR2(20) PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    role VARCHAR2(20) CHECK (role IN ('ADMIN','TEACHER','STUDENT')),
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);
CREATE SEQUENCE user_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_user_id
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.role = 'ADMIN' THEN
        :NEW.user_id := 'ADM-' || TO_CHAR(user_seq.NEXTVAL, 'FM0000');
    ELSIF :NEW.role = 'TEACHER' THEN
        :NEW.user_id := 'INS-' || TO_CHAR(user_seq.NEXTVAL, 'FM0000');
    ELSE
        :NEW.user_id := '24RP0-' || TO_CHAR(user_seq.NEXTVAL, 'FM0000');
    END IF;
END;
/

-- COURSES TABLE
CREATE TABLE COURSES (
    course_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_name VARCHAR2(100) NOT NULL,
    description CLOB,
    created_by VARCHAR2(20),
    FOREIGN KEY (created_by) REFERENCES USERS(user_id)
);

-- ENROLLMENTS TABLE (for student enrollments)
CREATE TABLE ENROLLMENTS (
    enrollment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id VARCHAR2(20) NOT NULL,
    course_id NUMBER NOT NULL,
    status VARCHAR2(20) CHECK (status IN ('PENDING','APPROVED','REJECTED')) DEFAULT 'PENDING',
    request_date TIMESTAMP DEFAULT SYSTIMESTAMP,
    approved_by VARCHAR2(20),
    FOREIGN KEY (student_id) REFERENCES USERS(user_id),
    FOREIGN KEY (approved_by) REFERENCES USERS(user_id),
    FOREIGN KEY (course_id) REFERENCES COURSES(course_id)
);

-- EXAMS TABLE
CREATE TABLE EXAMS (
    exam_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_id NUMBER,
    exam_name VARCHAR2(100) NOT NULL,
    exam_date DATE,
    duration_minutes NUMBER,
    created_by VARCHAR2(20),
    FOREIGN KEY (course_id) REFERENCES COURSES(course_id),
    FOREIGN KEY (created_by) REFERENCES USERS(user_id)
);

